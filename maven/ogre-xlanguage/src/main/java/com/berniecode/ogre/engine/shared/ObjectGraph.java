package com.berniecode.ogre.engine.shared;

import java.util.Collection;

/**
 * A collection of {@link Entity}s belonging to a TypeDomain
 * 
 * @author Bernie Sumption
 */
public interface ObjectGraph {

	TypeDomain getTypeDomain();

	/**
	 * An ID that uniquely identifies the object graph within the scope of a single type domain on a
	 * single OGRE server.
	 * 
	 * <p>
	 * This is used to distinguish between object graphs when there are several of them using the
	 * same type domain. A simple human readable name is appropriate, e.g. "demo-graph".
	 */
	String getObjectGraphId();

	/**
	 * This number increments each time the object graph changes. If a client has a graph with
	 * dataVersion 7, and the dataVersion on the server is 10, then the client must apply updates 8,
	 * 9 and 10 to bring itself in sync with the server.
	 */
	String getDataVersion();

	/**
	 * A unique string that changes every time the dataVersion resets. This is typically a UUID, and
	 * is generated by the server.
	 * 
	 * <p>
	 * If the server restarts and loses it's internal state, it may have to start the dataVersion
	 * counting from 1 again. By changing the dataVersionScheme, all clients will be forced to
	 * download the whole object graph, since they can no longer rely on the dataVersion to
	 * establish what changes they need to download and apply.
	 */
	String getDataVersionScheme();

	/**
	 * @return The {@link Entity}s in this graph.
	 */
	Collection getEntities();
}
